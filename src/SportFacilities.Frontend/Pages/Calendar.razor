@page "/calendar"
@using Microsoft.AspNetCore.Components.Authorization
@using SportFacilities.Frontend.Services
@inject IReservationService ReservationService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Kalendarz Rezerwacji</PageTitle>



<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Kalendarz Rezerwacji</MudText>

    <MudCalendar Items="_events" MonthCellMinHeight="120">
        <CellTemplate>
            <div style="width: 100%; height: 100%; border: 2px solid @GetColor(((CustomCalendarItem)context).Color)">
                <div style="background-color: @GetColor(((CustomCalendarItem)context).Color)">
                    <MudText Style="color: #ffffff;" Typo="Typo.body1"
                             Align="Align.Center">@(((CustomCalendarItem)context).Text)</MudText>
                </div>
            </div>
        </CellTemplate>
    </MudCalendar>
</MudPaper>

@code {
    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";

    private MudCalendar _calendar;
    private List<CustomCalendarItem> _events = new();
    private string currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUserId = user?.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        await LoadAllReservations();
    }

    private async Task LoadAllReservations()
    {
        try
        {
            // Pobierz wszystkie rezerwacje (przekazując 0 jako facilityId, zakładamy, że oznacza to "wszystkie")
            var reservations = await ReservationService.GetReservationsAsync(0);
            _events.Clear();

            if (reservations != null)
            {
                foreach (var reservation in reservations)
                {
                    _events.Add(new CustomCalendarItem
                    {
                        Start = reservation.StartTime.UtcDateTime,
                        End = reservation.EndTime.UtcDateTime,
                        Text = $"@{reservation.UserEmail}: {reservation.Description}",
                        Color = reservation.UserId == currentUserId ? Color.Success : Color.Primary
                    });
                }
            }
        }
        catch (ApiException ex)
        {
            Console.WriteLine($"Błąd API: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Nieoczekiwany błąd: {ex.Message}");
        }
    }

}